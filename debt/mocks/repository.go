// Code generated by MockGen. DO NOT EDIT.
// Source: debt/repository.go
//
// Generated by this command:
//
//	mockgen -source=debt/repository.go -destination=debt/mocks/repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	debt "github.com/henriquerocha2004/quem-me-deve-api/debt"
	ulid "github.com/oklog/ulid/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ClientUserDebts mocks base method.
func (m *MockReader) ClientUserDebts(ctx context.Context, clientUserId ulid.ULID) ([]*debt.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientUserDebts", ctx, clientUserId)
	ret0, _ := ret[0].([]*debt.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientUserDebts indicates an expected call of ClientUserDebts.
func (mr *MockReaderMockRecorder) ClientUserDebts(ctx, clientUserId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientUserDebts", reflect.TypeOf((*MockReader)(nil).ClientUserDebts), ctx, clientUserId)
}

// DebtInstallments mocks base method.
func (m *MockReader) DebtInstallments(ctx context.Context, debtId ulid.ULID) ([]*debt.Installment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebtInstallments", ctx, debtId)
	ret0, _ := ret[0].([]*debt.Installment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebtInstallments indicates an expected call of DebtInstallments.
func (mr *MockReaderMockRecorder) DebtInstallments(ctx, debtId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebtInstallments", reflect.TypeOf((*MockReader)(nil).DebtInstallments), ctx, debtId)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
	isgomock struct{}
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockWriter) Save(ctx context.Context, arg1 *debt.Debt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockWriterMockRecorder) Save(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWriter)(nil).Save), ctx, arg1)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ClientUserDebts mocks base method.
func (m *MockRepository) ClientUserDebts(ctx context.Context, clientUserId ulid.ULID) ([]*debt.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientUserDebts", ctx, clientUserId)
	ret0, _ := ret[0].([]*debt.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientUserDebts indicates an expected call of ClientUserDebts.
func (mr *MockRepositoryMockRecorder) ClientUserDebts(ctx, clientUserId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientUserDebts", reflect.TypeOf((*MockRepository)(nil).ClientUserDebts), ctx, clientUserId)
}

// DebtInstallments mocks base method.
func (m *MockRepository) DebtInstallments(ctx context.Context, debtId ulid.ULID) ([]*debt.Installment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebtInstallments", ctx, debtId)
	ret0, _ := ret[0].([]*debt.Installment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebtInstallments indicates an expected call of DebtInstallments.
func (mr *MockRepositoryMockRecorder) DebtInstallments(ctx, debtId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebtInstallments", reflect.TypeOf((*MockRepository)(nil).DebtInstallments), ctx, debtId)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, arg1 *debt.Debt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, arg1)
}

// MockClientReader is a mock of ClientReader interface.
type MockClientReader struct {
	ctrl     *gomock.Controller
	recorder *MockClientReaderMockRecorder
	isgomock struct{}
}

// MockClientReaderMockRecorder is the mock recorder for MockClientReader.
type MockClientReaderMockRecorder struct {
	mock *MockClientReader
}

// NewMockClientReader creates a new mock instance.
func NewMockClientReader(ctrl *gomock.Controller) *MockClientReader {
	mock := &MockClientReader{ctrl: ctrl}
	mock.recorder = &MockClientReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientReader) EXPECT() *MockClientReaderMockRecorder {
	return m.recorder
}

// ClientExists mocks base method.
func (m *MockClientReader) ClientExists(ctx context.Context, id ulid.ULID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientExists indicates an expected call of ClientExists.
func (mr *MockClientReaderMockRecorder) ClientExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientExists", reflect.TypeOf((*MockClientReader)(nil).ClientExists), ctx, id)
}
