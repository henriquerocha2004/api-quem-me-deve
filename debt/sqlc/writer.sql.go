// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: writer.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createCancelInfo = `-- name: CreateCancelInfo :exec
INSERT INTO public.cancel_info (id, reason, cancel_date, cancelled_by, created_at, updated_at, debt_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateCancelInfoParams struct {
	ID          string       `json:"id"`
	Reason      string       `json:"reason"`
	CancelDate  sql.NullTime `json:"cancel_date"`
	CancelledBy string       `json:"cancelled_by"`
	CreatedAt   sql.NullTime `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
	DebtID      string       `json:"debt_id"`
}

func (q *Queries) CreateCancelInfo(ctx context.Context, arg CreateCancelInfoParams) error {
	_, err := q.db.ExecContext(ctx, createCancelInfo,
		arg.ID,
		arg.Reason,
		arg.CancelDate,
		arg.CancelledBy,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DebtID,
	)
	return err
}

const createInstallment = `-- name: CreateInstallment :exec
INSERT INTO public.installments (id, description, value, due_date, deb_date, status, payment_date, payment_method, number, debt_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
`

type CreateInstallmentParams struct {
	ID            string         `json:"id"`
	Description   string         `json:"description"`
	Value         string         `json:"value"`
	DueDate       sql.NullTime   `json:"due_date"`
	DebDate       sql.NullTime   `json:"deb_date"`
	Status        string         `json:"status"`
	PaymentDate   sql.NullTime   `json:"payment_date"`
	PaymentMethod sql.NullString `json:"payment_method"`
	Number        int32          `json:"number"`
	DebtID        string         `json:"debt_id"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateInstallment(ctx context.Context, arg CreateInstallmentParams) error {
	_, err := q.db.ExecContext(ctx, createInstallment,
		arg.ID,
		arg.Description,
		arg.Value,
		arg.DueDate,
		arg.DebDate,
		arg.Status,
		arg.PaymentDate,
		arg.PaymentMethod,
		arg.Number,
		arg.DebtID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createReversalInfo = `-- name: CreateReversalInfo :exec
INSERT INTO public.reversal_info (id, reason, reversal_date, reversed_by, reversed_installment_qtd, cancelled_installment_qtd, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateReversalInfoParams struct {
	ID                      string       `json:"id"`
	Reason                  string       `json:"reason"`
	ReversalDate            sql.NullTime `json:"reversal_date"`
	ReversedBy              string       `json:"reversed_by"`
	ReversedInstallmentQtd  int32        `json:"reversed_installment_qtd"`
	CancelledInstallmentQtd int32        `json:"cancelled_installment_qtd"`
	CreatedAt               sql.NullTime `json:"created_at"`
	UpdatedAt               sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateReversalInfo(ctx context.Context, arg CreateReversalInfoParams) error {
	_, err := q.db.ExecContext(ctx, createReversalInfo,
		arg.ID,
		arg.Reason,
		arg.ReversalDate,
		arg.ReversedBy,
		arg.ReversedInstallmentQtd,
		arg.CancelledInstallmentQtd,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const saveDebt = `-- name: SaveDebt :exec
INSERT INTO public.debts (id, description, total_value, due_date, installments_quantity, debt_date, status, user_client_id, product_ids, service_ids, finished_at, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
`

type SaveDebtParams struct {
	ID                   string       `json:"id"`
	Description          string       `json:"description"`
	TotalValue           string       `json:"total_value"`
	DueDate              sql.NullTime `json:"due_date"`
	InstallmentsQuantity int32        `json:"installments_quantity"`
	DebtDate             sql.NullTime `json:"debt_date"`
	Status               string       `json:"status"`
	UserClientID         string       `json:"user_client_id"`
	ProductIds           []string     `json:"product_ids"`
	ServiceIds           []string     `json:"service_ids"`
	FinishedAt           sql.NullTime `json:"finished_at"`
	CreatedAt            sql.NullTime `json:"created_at"`
	UpdatedAt            sql.NullTime `json:"updated_at"`
}

// description: Save a new debt
func (q *Queries) SaveDebt(ctx context.Context, arg SaveDebtParams) error {
	_, err := q.db.ExecContext(ctx, saveDebt,
		arg.ID,
		arg.Description,
		arg.TotalValue,
		arg.DueDate,
		arg.InstallmentsQuantity,
		arg.DebtDate,
		arg.Status,
		arg.UserClientID,
		pq.Array(arg.ProductIds),
		pq.Array(arg.ServiceIds),
		arg.FinishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const updateDebt = `-- name: UpdateDebt :exec
UPDATE public.debts
SET description = $2,
    total_value = $3,
    due_date = $4,
    installments_quantity = $5,
    debt_date = $6,
    status = $7,
    user_client_id = $8,
    product_ids = $9,
    service_ids = $10,
    finished_at = $11,
    updated_at = $12
WHERE id = $1
`

type UpdateDebtParams struct {
	ID                   string       `json:"id"`
	Description          string       `json:"description"`
	TotalValue           string       `json:"total_value"`
	DueDate              sql.NullTime `json:"due_date"`
	InstallmentsQuantity int32        `json:"installments_quantity"`
	DebtDate             sql.NullTime `json:"debt_date"`
	Status               string       `json:"status"`
	UserClientID         string       `json:"user_client_id"`
	ProductIds           []string     `json:"product_ids"`
	ServiceIds           []string     `json:"service_ids"`
	FinishedAt           sql.NullTime `json:"finished_at"`
	UpdatedAt            sql.NullTime `json:"updated_at"`
}

// description: Update an existing debt
func (q *Queries) UpdateDebt(ctx context.Context, arg UpdateDebtParams) error {
	_, err := q.db.ExecContext(ctx, updateDebt,
		arg.ID,
		arg.Description,
		arg.TotalValue,
		arg.DueDate,
		arg.InstallmentsQuantity,
		arg.DebtDate,
		arg.Status,
		arg.UserClientID,
		pq.Array(arg.ProductIds),
		pq.Array(arg.ServiceIds),
		arg.FinishedAt,
		arg.UpdatedAt,
	)
	return err
}
